/**
 * This file was automatically generated by the ICG based on the file:
 * /home/caci114/Project_2023/SIM_submarine/models/submarine/include/Submarine.hh
 * This file contains database parameter declarations specific to the
 * data structures and enumerated types declared in the above file.
 * These database parameters are used by the Trick input and
 * data recording processors to gain access to important simulation
 * variable information.
 */

#define TRICK_IN_IOSRC
#include <stdlib.h>
#include "trick/MemoryManager.hh"
#include "trick/attributes.h"
#include "trick/parameter_types.h"
#include "trick/ClassSizeCheck.hh"
#include "trick/UnitsMap.hh"
#include "trick/checkpoint_stl.hh"
#include "/home/caci114/Project_2023/SIM_submarine/models/submarine/include/Submarine.hh"

extern "C" {

ATTRIBUTES attrSubmarine[] = {
{"outer_hull_outer_radius", "double", "m", "", "",
  "outer hull outer radius",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 0,
  0, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"outer_hull_inner_radius", "double", "m", "", "",
  "outer hull inner radius",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 0,
  8, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"inner_hull_outer_radius", "double", "m", "", "",
  "inner hull outer radius",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 0,
  16, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"inner_hull_inner_radius", "double", "m", "", "",
  "inner hull inner radius",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 0,
  24, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"hull_length", "double", "m", "", "",
  "hull length",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 0,
  32, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"ballast_tank_volume", "double", "L", "", "",
  "ballast tank volume",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 0,
  40, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"hard_ballast_mass", "double", "kg", "", "",
  "hard ballast mass",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 0,
  48, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"hull_mass", "double", "kg", "", "",
  "hull mass",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 0,
  56, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"payload_mass", "double", "kg", "", "",
  "payload mass",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 0,
  64, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"Cd", "double", "1", "", "",
  "drag coeff",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 4,
  72, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"hull_volume", "double", "L", "", "",
  "hull volume",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 0,
  80, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"ballast_air_volume", "double", "L", "", "",
  "ballast air volume",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 0,
  88, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"ballast_water_volume", "double", "L", "", "",
  "ballast water volume",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 0,
  96, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"mass_ballast_water", "double", "1", "", "",
  "mass of ballast water",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 0,
  104, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"hull_disp_volume", "double", "L", "", "",
  "hull displacement volume",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 0,
  112, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"mass_total", "double", "1", "", "",
  "total mass",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 0,
  120, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"A", "double", "m^3", "", "",
  "area of cross section",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 0,
  128, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"mass_total_disp", "double", "kg", "", "",
  "mass total displacement",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 0,
  136, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"bouy_force", "double", "N", "", "",
  "bouyancy force",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 0,
  144, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"drag_force", "double", "N", "", "",
  "drag force",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 0,
  152, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"gravity_force", "double", "N", "", "",
  "gravity force",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 0,
  160, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"total_force", "double", "N", "", "",
  "total force",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 0,
  168, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"pos", "double", "m", "", "",
  "submarine",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 0,
  176, NULL, 1, {{2, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"vel", "double", "m/s", "", "",
  "submarine",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 0,
  192, NULL, 1, {{2, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"ballast_energy", "double", "joules", "", "",
  "ballast energy",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 0,
  208, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"pump_power", "double", "watts", "", "",
  "pump power",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 0,
  216, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"acc", "double", "m/s/s", "", "",
  "outer hull outer radius",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 0,
  224, NULL, 1, {{2, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"ballast_air_ratio", "double", "1", "", "",
  "",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 0,
  240, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"water_pressure_pascals", "double", "kPa", "", "",
  "outer hull outer radius",
  10,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 0,
  248, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"water_pressure_PSI", "double", "1", "", "",
  "",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 0,
  256, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"pump_power_command", "int", "1", "", "",
  "",
  15,TRICK_INTEGER, sizeof(int), 0, 0, Language_CPP, 0,
  264, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"", "", "1", "", "",
  "",
  15,TRICK_VOID, 0, 0, 0, Language_CPP, 0,
  0, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL} };

} //extern "C"


void init_attrSubmarine() {

    static int initialized ;
    if (initialized) {
        return;
    }
    initialized = 1;

}

extern "C" {

void init_attrSubmarine_c_intf() {
    init_attrSubmarine() ;
}

size_t io_src_sizeof_Submarine() {
    return sizeof(Submarine) ;
}

void* io_src_allocate_Submarine(int num) {
    Submarine* temp = (Submarine*)calloc(num, sizeof(Submarine));
    return (void*)temp;
}

void io_src_destruct_Submarine(void* address __attribute__((unused)), int num __attribute__((unused))) {
}

void io_src_delete_Submarine(void* address __attribute__((unused))) {}

} //extern "C"

struct UnitsMapSubmarine {
    UnitsMapSubmarine() {
        Trick::UnitsMap* units_map_ptr = Trick::UnitsMap::units_map();
        units_map_ptr->add_param("Submarine_outer_hull_outer_radius", "m") ;
        units_map_ptr->add_param("Submarine_outer_hull_inner_radius", "m") ;
        units_map_ptr->add_param("Submarine_inner_hull_outer_radius", "m") ;
        units_map_ptr->add_param("Submarine_inner_hull_inner_radius", "m") ;
        units_map_ptr->add_param("Submarine_hull_length", "m") ;
        units_map_ptr->add_param("Submarine_ballast_tank_volume", "L") ;
        units_map_ptr->add_param("Submarine_hard_ballast_mass", "kg") ;
        units_map_ptr->add_param("Submarine_hull_mass", "kg") ;
        units_map_ptr->add_param("Submarine_payload_mass", "kg") ;
        units_map_ptr->add_param("Submarine_Cd", "1") ;
        units_map_ptr->add_param("Submarine_hull_volume", "L") ;
        units_map_ptr->add_param("Submarine_ballast_air_volume", "L") ;
        units_map_ptr->add_param("Submarine_ballast_water_volume", "L") ;
        units_map_ptr->add_param("Submarine_mass_ballast_water", "1") ;
        units_map_ptr->add_param("Submarine_hull_disp_volume", "L") ;
        units_map_ptr->add_param("Submarine_mass_total", "1") ;
        units_map_ptr->add_param("Submarine_A", "m^3") ;
        units_map_ptr->add_param("Submarine_mass_total_disp", "kg") ;
        units_map_ptr->add_param("Submarine_bouy_force", "N") ;
        units_map_ptr->add_param("Submarine_drag_force", "N") ;
        units_map_ptr->add_param("Submarine_gravity_force", "N") ;
        units_map_ptr->add_param("Submarine_total_force", "N") ;
        units_map_ptr->add_param("Submarine_pos", "m") ;
        units_map_ptr->add_param("Submarine_vel", "m/s") ;
        units_map_ptr->add_param("Submarine_ballast_energy", "joules") ;
        units_map_ptr->add_param("Submarine_pump_power", "watts") ;
        units_map_ptr->add_param("Submarine_acc", "m/s/s") ;
        units_map_ptr->add_param("Submarine_ballast_air_ratio", "1") ;
        units_map_ptr->add_param("Submarine_water_pressure_pascals", "kPa") ;
        units_map_ptr->add_param("Submarine_water_pressure_PSI", "1") ;
        units_map_ptr->add_param("Submarine_pump_power_command", "1") ;
    }
} umSubmarine;

