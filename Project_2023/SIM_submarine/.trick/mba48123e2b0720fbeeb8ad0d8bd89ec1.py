# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_mba48123e2b0720fbeeb8ad0d8bd89ec1')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_mba48123e2b0720fbeeb8ad0d8bd89ec1')
    _mba48123e2b0720fbeeb8ad0d8bd89ec1 = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_mba48123e2b0720fbeeb8ad0d8bd89ec1', [dirname(__file__)])
        except ImportError:
            import _mba48123e2b0720fbeeb8ad0d8bd89ec1
            return _mba48123e2b0720fbeeb8ad0d8bd89ec1
        try:
            _mod = imp.load_module('_mba48123e2b0720fbeeb8ad0d8bd89ec1', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _mba48123e2b0720fbeeb8ad0d8bd89ec1 = swig_import_helper()
    del swig_import_helper
else:
    import _mba48123e2b0720fbeeb8ad0d8bd89ec1
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _mba48123e2b0720fbeeb8ad0d8bd89ec1.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _mba48123e2b0720fbeeb8ad0d8bd89ec1.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _mba48123e2b0720fbeeb8ad0d8bd89ec1.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _mba48123e2b0720fbeeb8ad0d8bd89ec1.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _mba48123e2b0720fbeeb8ad0d8bd89ec1.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _mba48123e2b0720fbeeb8ad0d8bd89ec1.SwigPyIterator_equal(self, x)

    def copy(self):
        return _mba48123e2b0720fbeeb8ad0d8bd89ec1.SwigPyIterator_copy(self)

    def next(self):
        return _mba48123e2b0720fbeeb8ad0d8bd89ec1.SwigPyIterator_next(self)

    def __next__(self):
        return _mba48123e2b0720fbeeb8ad0d8bd89ec1.SwigPyIterator___next__(self)

    def previous(self):
        return _mba48123e2b0720fbeeb8ad0d8bd89ec1.SwigPyIterator_previous(self)

    def advance(self, n):
        return _mba48123e2b0720fbeeb8ad0d8bd89ec1.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _mba48123e2b0720fbeeb8ad0d8bd89ec1.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _mba48123e2b0720fbeeb8ad0d8bd89ec1.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _mba48123e2b0720fbeeb8ad0d8bd89ec1.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _mba48123e2b0720fbeeb8ad0d8bd89ec1.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _mba48123e2b0720fbeeb8ad0d8bd89ec1.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _mba48123e2b0720fbeeb8ad0d8bd89ec1.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _mba48123e2b0720fbeeb8ad0d8bd89ec1.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    all_keys = [attr for attr in dir(class_type) if not attr.startswith('__')and attr != '_s' ]
    data_keys = sorted(class_type.__swig_setmethods__.keys())
    method_keys = [ x for x in all_keys if x not in data_keys ]
    raise AttributeError("Type %s does not contain member %s.\n%s data = %s\n%s methods = %s" %
     (self.__class__.__name__,name,self.__class__.__name__,data_keys,self.__class__.__name__,method_keys))

def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
# this line is changed to handle older swigs that used PySwigObject instead of the current SwigPyObject
        if type(value).__name__ == 'SwigPyObject' or type(value).__name__ == 'PySwigObject' :
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        all_keys = [attr for attr in dir(class_type) if not attr.startswith('__') and attr != '_s' ]
        data_keys = sorted(class_type.__swig_setmethods__.keys())
        method_keys = [ x for x in all_keys if x not in data_keys ]
        raise AttributeError("Type %s does not contain member %s.\n%s data = %s\n%s methods = %s" %
         (self.__class__.__name__,name,self.__class__.__name__,data_keys,self.__class__.__name__,method_keys))

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,1)

DENSITY_SALT_WATER = _mba48123e2b0720fbeeb8ad0d8bd89ec1.DENSITY_SALT_WATER
GRAVITY = _mba48123e2b0720fbeeb8ad0d8bd89ec1.GRAVITY
CONVERSION_PASCALS_TO_PSI = _mba48123e2b0720fbeeb8ad0d8bd89ec1.CONVERSION_PASCALS_TO_PSI
ATMOS_PRESSURE = _mba48123e2b0720fbeeb8ad0d8bd89ec1.ATMOS_PRESSURE
class Submarine(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Submarine, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Submarine, name)
    __repr__ = _swig_repr
    __swig_setmethods__["outer_hull_outer_radius"] = _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_outer_hull_outer_radius_set
    __swig_getmethods__["outer_hull_outer_radius"] = _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_outer_hull_outer_radius_get
    if _newclass:
        outer_hull_outer_radius = _swig_property(_mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_outer_hull_outer_radius_get, _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_outer_hull_outer_radius_set)
    __swig_setmethods__["outer_hull_inner_radius"] = _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_outer_hull_inner_radius_set
    __swig_getmethods__["outer_hull_inner_radius"] = _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_outer_hull_inner_radius_get
    if _newclass:
        outer_hull_inner_radius = _swig_property(_mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_outer_hull_inner_radius_get, _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_outer_hull_inner_radius_set)
    __swig_setmethods__["inner_hull_outer_radius"] = _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_inner_hull_outer_radius_set
    __swig_getmethods__["inner_hull_outer_radius"] = _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_inner_hull_outer_radius_get
    if _newclass:
        inner_hull_outer_radius = _swig_property(_mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_inner_hull_outer_radius_get, _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_inner_hull_outer_radius_set)
    __swig_setmethods__["inner_hull_inner_radius"] = _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_inner_hull_inner_radius_set
    __swig_getmethods__["inner_hull_inner_radius"] = _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_inner_hull_inner_radius_get
    if _newclass:
        inner_hull_inner_radius = _swig_property(_mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_inner_hull_inner_radius_get, _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_inner_hull_inner_radius_set)
    __swig_setmethods__["hull_length"] = _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_hull_length_set
    __swig_getmethods__["hull_length"] = _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_hull_length_get
    if _newclass:
        hull_length = _swig_property(_mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_hull_length_get, _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_hull_length_set)
    __swig_setmethods__["ballast_tank_volume"] = _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_ballast_tank_volume_set
    __swig_getmethods__["ballast_tank_volume"] = _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_ballast_tank_volume_get
    if _newclass:
        ballast_tank_volume = _swig_property(_mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_ballast_tank_volume_get, _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_ballast_tank_volume_set)
    __swig_setmethods__["hard_ballast_mass"] = _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_hard_ballast_mass_set
    __swig_getmethods__["hard_ballast_mass"] = _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_hard_ballast_mass_get
    if _newclass:
        hard_ballast_mass = _swig_property(_mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_hard_ballast_mass_get, _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_hard_ballast_mass_set)
    __swig_setmethods__["hull_mass"] = _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_hull_mass_set
    __swig_getmethods__["hull_mass"] = _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_hull_mass_get
    if _newclass:
        hull_mass = _swig_property(_mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_hull_mass_get, _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_hull_mass_set)
    __swig_setmethods__["payload_mass"] = _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_payload_mass_set
    __swig_getmethods__["payload_mass"] = _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_payload_mass_get
    if _newclass:
        payload_mass = _swig_property(_mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_payload_mass_get, _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_payload_mass_set)
    __swig_setmethods__["Cd"] = _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_Cd_set
    __swig_getmethods__["Cd"] = _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_Cd_get
    if _newclass:
        Cd = _swig_property(_mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_Cd_get, _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_Cd_set)
    __swig_setmethods__["hull_volume"] = _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_hull_volume_set
    __swig_getmethods__["hull_volume"] = _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_hull_volume_get
    if _newclass:
        hull_volume = _swig_property(_mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_hull_volume_get, _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_hull_volume_set)
    __swig_setmethods__["ballast_air_volume"] = _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_ballast_air_volume_set
    __swig_getmethods__["ballast_air_volume"] = _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_ballast_air_volume_get
    if _newclass:
        ballast_air_volume = _swig_property(_mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_ballast_air_volume_get, _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_ballast_air_volume_set)
    __swig_setmethods__["ballast_water_volume"] = _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_ballast_water_volume_set
    __swig_getmethods__["ballast_water_volume"] = _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_ballast_water_volume_get
    if _newclass:
        ballast_water_volume = _swig_property(_mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_ballast_water_volume_get, _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_ballast_water_volume_set)
    __swig_setmethods__["mass_ballast_water"] = _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_mass_ballast_water_set
    __swig_getmethods__["mass_ballast_water"] = _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_mass_ballast_water_get
    if _newclass:
        mass_ballast_water = _swig_property(_mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_mass_ballast_water_get, _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_mass_ballast_water_set)
    __swig_setmethods__["hull_disp_volume"] = _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_hull_disp_volume_set
    __swig_getmethods__["hull_disp_volume"] = _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_hull_disp_volume_get
    if _newclass:
        hull_disp_volume = _swig_property(_mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_hull_disp_volume_get, _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_hull_disp_volume_set)
    __swig_setmethods__["mass_total"] = _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_mass_total_set
    __swig_getmethods__["mass_total"] = _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_mass_total_get
    if _newclass:
        mass_total = _swig_property(_mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_mass_total_get, _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_mass_total_set)
    __swig_setmethods__["A"] = _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_A_set
    __swig_getmethods__["A"] = _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_A_get
    if _newclass:
        A = _swig_property(_mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_A_get, _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_A_set)
    __swig_setmethods__["mass_total_disp"] = _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_mass_total_disp_set
    __swig_getmethods__["mass_total_disp"] = _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_mass_total_disp_get
    if _newclass:
        mass_total_disp = _swig_property(_mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_mass_total_disp_get, _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_mass_total_disp_set)
    __swig_setmethods__["bouy_force"] = _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_bouy_force_set
    __swig_getmethods__["bouy_force"] = _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_bouy_force_get
    if _newclass:
        bouy_force = _swig_property(_mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_bouy_force_get, _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_bouy_force_set)
    __swig_setmethods__["drag_force"] = _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_drag_force_set
    __swig_getmethods__["drag_force"] = _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_drag_force_get
    if _newclass:
        drag_force = _swig_property(_mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_drag_force_get, _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_drag_force_set)
    __swig_setmethods__["gravity_force"] = _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_gravity_force_set
    __swig_getmethods__["gravity_force"] = _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_gravity_force_get
    if _newclass:
        gravity_force = _swig_property(_mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_gravity_force_get, _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_gravity_force_set)
    __swig_setmethods__["total_force"] = _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_total_force_set
    __swig_getmethods__["total_force"] = _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_total_force_get
    if _newclass:
        total_force = _swig_property(_mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_total_force_get, _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_total_force_set)
    __swig_setmethods__["pos"] = _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_pos_set
    __swig_getmethods__["pos"] = _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_pos_get
    if _newclass:
        pos = _swig_property(_mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_pos_get, _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_pos_set)
    __swig_setmethods__["vel"] = _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_vel_set
    __swig_getmethods__["vel"] = _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_vel_get
    if _newclass:
        vel = _swig_property(_mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_vel_get, _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_vel_set)
    __swig_setmethods__["ballast_energy"] = _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_ballast_energy_set
    __swig_getmethods__["ballast_energy"] = _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_ballast_energy_get
    if _newclass:
        ballast_energy = _swig_property(_mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_ballast_energy_get, _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_ballast_energy_set)
    __swig_setmethods__["pump_power"] = _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_pump_power_set
    __swig_getmethods__["pump_power"] = _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_pump_power_get
    if _newclass:
        pump_power = _swig_property(_mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_pump_power_get, _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_pump_power_set)
    __swig_setmethods__["acc"] = _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_acc_set
    __swig_getmethods__["acc"] = _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_acc_get
    if _newclass:
        acc = _swig_property(_mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_acc_get, _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_acc_set)
    __swig_setmethods__["ballast_air_ratio"] = _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_ballast_air_ratio_set
    __swig_getmethods__["ballast_air_ratio"] = _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_ballast_air_ratio_get
    if _newclass:
        ballast_air_ratio = _swig_property(_mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_ballast_air_ratio_get, _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_ballast_air_ratio_set)
    __swig_setmethods__["water_pressure_pascals"] = _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_water_pressure_pascals_set
    __swig_getmethods__["water_pressure_pascals"] = _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_water_pressure_pascals_get
    if _newclass:
        water_pressure_pascals = _swig_property(_mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_water_pressure_pascals_get, _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_water_pressure_pascals_set)
    __swig_setmethods__["water_pressure_PSI"] = _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_water_pressure_PSI_set
    __swig_getmethods__["water_pressure_PSI"] = _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_water_pressure_PSI_get
    if _newclass:
        water_pressure_PSI = _swig_property(_mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_water_pressure_PSI_get, _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_water_pressure_PSI_set)
    __swig_setmethods__["pump_power_command"] = _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_pump_power_command_set
    __swig_getmethods__["pump_power_command"] = _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_pump_power_command_get
    if _newclass:
        pump_power_command = _swig_property(_mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_pump_power_command_get, _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_pump_power_command_set)

    def submarine_default_data(self, *args):
        return _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_submarine_default_data(self, *args)

    def submarine_init(self, *args):
        return _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_submarine_init(self, *args)

    def submarine_shutdown(self, *args):
        return _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_submarine_shutdown(self, *args)

    def submarine_integ(self, *args):
        return _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_submarine_integ(self, *args)

    def submarine_deriv(self, *args):
        return _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_submarine_deriv(self, *args)

    def submarine_control(self, *args):
        return _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_submarine_control(self, *args)

    def __getitem__(self, *args):
        return _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine___getitem__(self, *args)

    def __len__(self, *args):
        return _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine___len__(self, *args)

    def __init__(self, **kwargs):
        import _sim_services
        this = _mba48123e2b0720fbeeb8ad0d8bd89ec1.new_Submarine()
        try: self.this.append(this)
        except: self.this = this
        if 'TMMName' in kwargs:
            self.this.own(0)
            isThisInMM = _sim_services.get_alloc_info_at(this)
            if isThisInMM:
                _sim_services.set_alloc_name_at(this, kwargs['TMMName'])
            else:
                _sim_services.TMM_declare_ext_var(this, _sim_services.TRICK_STRUCTURED, "Submarine", 0, kwargs['TMMName'], 0, None)
            alloc_info = _sim_services.get_alloc_info_at(this)
            alloc_info.stcl = _sim_services.TRICK_LOCAL
            alloc_info.alloc_type = _sim_services.TRICK_ALLOC_NEW


    __swig_destroy__ = _mba48123e2b0720fbeeb8ad0d8bd89ec1.delete_Submarine
    __del__ = lambda self: None
Submarine_swigregister = _mba48123e2b0720fbeeb8ad0d8bd89ec1.Submarine_swigregister
Submarine_swigregister(Submarine)


def castAsSubmarine(*args):
    return _mba48123e2b0720fbeeb8ad0d8bd89ec1.castAsSubmarine(*args)
castAsSubmarine = _mba48123e2b0720fbeeb8ad0d8bd89ec1.castAsSubmarine
# This file is compatible with both classic and new-style classes.


